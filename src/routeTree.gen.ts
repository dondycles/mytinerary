/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LogoutImport } from './routes/logout'
import { Route as PathlessLayoutImport } from './routes/_pathlessLayout'
import { Route as userRouteImport } from './routes/(user)/route'
import { Route as IndexImport } from './routes/index'
import { Route as userItinerariesIndexImport } from './routes/(user)/itineraries/index'
import { Route as userItinerariesIdIndexImport } from './routes/(user)/itineraries/$id/index'

// Create/Update Routes

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutRoute = PathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const userRouteRoute = userRouteImport.update({
  id: '/(user)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const userItinerariesIndexRoute = userItinerariesIndexImport.update({
  id: '/itineraries/',
  path: '/itineraries/',
  getParentRoute: () => userRouteRoute,
} as any)

const userItinerariesIdIndexRoute = userItinerariesIdIndexImport.update({
  id: '/itineraries/$id/',
  path: '/itineraries/$id/',
  getParentRoute: () => userRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(user)': {
      id: '/(user)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userRouteImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/(user)/itineraries/': {
      id: '/(user)/itineraries/'
      path: '/itineraries'
      fullPath: '/itineraries'
      preLoaderRoute: typeof userItinerariesIndexImport
      parentRoute: typeof userRouteImport
    }
    '/(user)/itineraries/$id/': {
      id: '/(user)/itineraries/$id/'
      path: '/itineraries/$id'
      fullPath: '/itineraries/$id'
      preLoaderRoute: typeof userItinerariesIdIndexImport
      parentRoute: typeof userRouteImport
    }
  }
}

// Create and export the route tree

interface userRouteRouteChildren {
  userItinerariesIndexRoute: typeof userItinerariesIndexRoute
  userItinerariesIdIndexRoute: typeof userItinerariesIdIndexRoute
}

const userRouteRouteChildren: userRouteRouteChildren = {
  userItinerariesIndexRoute: userItinerariesIndexRoute,
  userItinerariesIdIndexRoute: userItinerariesIdIndexRoute,
}

const userRouteRouteWithChildren = userRouteRoute._addFileChildren(
  userRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof userRouteRouteWithChildren
  '': typeof PathlessLayoutRoute
  '/logout': typeof LogoutRoute
  '/itineraries': typeof userItinerariesIndexRoute
  '/itineraries/$id': typeof userItinerariesIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof userRouteRouteWithChildren
  '': typeof PathlessLayoutRoute
  '/logout': typeof LogoutRoute
  '/itineraries': typeof userItinerariesIndexRoute
  '/itineraries/$id': typeof userItinerariesIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(user)': typeof userRouteRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRoute
  '/logout': typeof LogoutRoute
  '/(user)/itineraries/': typeof userItinerariesIndexRoute
  '/(user)/itineraries/$id/': typeof userItinerariesIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/logout' | '/itineraries' | '/itineraries/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/logout' | '/itineraries' | '/itineraries/$id'
  id:
    | '__root__'
    | '/'
    | '/(user)'
    | '/_pathlessLayout'
    | '/logout'
    | '/(user)/itineraries/'
    | '/(user)/itineraries/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  userRouteRoute: typeof userRouteRouteWithChildren
  PathlessLayoutRoute: typeof PathlessLayoutRoute
  LogoutRoute: typeof LogoutRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  userRouteRoute: userRouteRouteWithChildren,
  PathlessLayoutRoute: PathlessLayoutRoute,
  LogoutRoute: LogoutRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(user)",
        "/_pathlessLayout",
        "/logout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(user)": {
      "filePath": "(user)/route.tsx",
      "children": [
        "/(user)/itineraries/",
        "/(user)/itineraries/$id/"
      ]
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/(user)/itineraries/": {
      "filePath": "(user)/itineraries/index.tsx",
      "parent": "/(user)"
    },
    "/(user)/itineraries/$id/": {
      "filePath": "(user)/itineraries/$id/index.tsx",
      "parent": "/(user)"
    }
  }
}
ROUTE_MANIFEST_END */
