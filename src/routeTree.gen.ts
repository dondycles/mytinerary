/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PathlessLayoutImport } from './routes/_pathlessLayout'
import { Route as userRouteImport } from './routes/(user)/route'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as IndexImport } from './routes/index'
import { Route as authSignupImport } from './routes/(auth)/signup'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as userItinerariesIndexImport } from './routes/(user)/itineraries/index'
import { Route as userItinerariesIdIndexImport } from './routes/(user)/itineraries/$id/index'

// Create/Update Routes

const PathlessLayoutRoute = PathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const userRouteRoute = userRouteImport.update({
  id: '/(user)',
  getParentRoute: () => rootRoute,
} as any)

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authSignupRoute = authSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => authRouteRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)

const userItinerariesIndexRoute = userItinerariesIndexImport.update({
  id: '/itineraries/',
  path: '/itineraries/',
  getParentRoute: () => userRouteRoute,
} as any)

const userItinerariesIdIndexRoute = userItinerariesIdIndexImport.update({
  id: '/itineraries/$id/',
  path: '/itineraries/$id/',
  getParentRoute: () => userRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/(user)': {
      id: '/(user)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userRouteImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupImport
      parentRoute: typeof authRouteImport
    }
    '/(user)/itineraries/': {
      id: '/(user)/itineraries/'
      path: '/itineraries'
      fullPath: '/itineraries'
      preLoaderRoute: typeof userItinerariesIndexImport
      parentRoute: typeof userRouteImport
    }
    '/(user)/itineraries/$id/': {
      id: '/(user)/itineraries/$id/'
      path: '/itineraries/$id'
      fullPath: '/itineraries/$id'
      preLoaderRoute: typeof userItinerariesIdIndexImport
      parentRoute: typeof userRouteImport
    }
  }
}

// Create and export the route tree

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface userRouteRouteChildren {
  userItinerariesIndexRoute: typeof userItinerariesIndexRoute
  userItinerariesIdIndexRoute: typeof userItinerariesIdIndexRoute
}

const userRouteRouteChildren: userRouteRouteChildren = {
  userItinerariesIndexRoute: userItinerariesIndexRoute,
  userItinerariesIdIndexRoute: userItinerariesIdIndexRoute,
}

const userRouteRouteWithChildren = userRouteRoute._addFileChildren(
  userRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof userRouteRouteWithChildren
  '': typeof PathlessLayoutRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/itineraries': typeof userItinerariesIndexRoute
  '/itineraries/$id': typeof userItinerariesIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof userRouteRouteWithChildren
  '': typeof PathlessLayoutRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/itineraries': typeof userItinerariesIndexRoute
  '/itineraries/$id': typeof userItinerariesIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/(user)': typeof userRouteRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/(user)/itineraries/': typeof userItinerariesIndexRoute
  '/(user)/itineraries/$id/': typeof userItinerariesIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/signup'
    | '/itineraries'
    | '/itineraries/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/signup' | '/itineraries' | '/itineraries/$id'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(user)'
    | '/_pathlessLayout'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/(user)/itineraries/'
    | '/(user)/itineraries/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  userRouteRoute: typeof userRouteRouteWithChildren
  PathlessLayoutRoute: typeof PathlessLayoutRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  userRouteRoute: userRouteRouteWithChildren,
  PathlessLayoutRoute: PathlessLayoutRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)",
        "/(user)",
        "/_pathlessLayout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/login",
        "/(auth)/signup"
      ]
    },
    "/(user)": {
      "filePath": "(user)/route.tsx",
      "children": [
        "/(user)/itineraries/",
        "/(user)/itineraries/$id/"
      ]
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/signup": {
      "filePath": "(auth)/signup.tsx",
      "parent": "/(auth)"
    },
    "/(user)/itineraries/": {
      "filePath": "(user)/itineraries/index.tsx",
      "parent": "/(user)"
    },
    "/(user)/itineraries/$id/": {
      "filePath": "(user)/itineraries/$id/index.tsx",
      "parent": "/(user)"
    }
  }
}
ROUTE_MANIFEST_END */
